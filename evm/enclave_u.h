/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_ENCLAVE_U_H
#define EDGER8R_ENCLAVE_U_H

#include <openenclave/host.h>

#include "enclave_args.h"

OE_EXTERNC_BEGIN

oe_result_t oe_create_enclave_enclave(
    const char* path,
    oe_enclave_type_t type,
    uint32_t flags,
    const oe_enclave_setting_t* settings,
    uint32_t setting_count,
    oe_enclave_t** enclave);

/**** ECALL prototypes. ****/
oe_result_t enclave_run(
    oe_enclave_t* enclave,
    exec_result_struct* result,
    gs_struct* _gs,
    tx_struct* _tx,
    unsigned char* _caller,
    unsigned char* _callee,
    uint8_t* _input,
    size_t _input_size,
    unsigned char* _call_value);

oe_result_t enclave_deploy(
    oe_enclave_t* enclave,
    gs_struct* _gs,
    tx_struct* _tx,
    unsigned char* _caller,
    uint8_t* _constructor,
    size_t _constructor_size,
    unsigned char* contract_address);

/**** OCALL prototypes. ****/
void push_ocall(
    uint64_t* pc,
    uint8_t bytes,
    uint8_t* code_arr,
    size_t code_size,
    unsigned char* res);

void add_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void mul_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void sub_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void div_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void sdiv_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void mod_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void smod_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void addmod_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* m,
    unsigned char* res);

void mulmod_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* m,
    unsigned char* res);

void exp_ocall(
    unsigned char* b,
    unsigned char* e,
    unsigned char* res);

void signextend_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void lt_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void gt_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void slt_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void eq_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void isZero_ocall(
    unsigned char* x,
    unsigned char* res);

void and_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void or_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void xor_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void not_ocall(
    unsigned char* x,
    unsigned char* res);

void byte_ocall(
    unsigned char* idx,
    unsigned char* val,
    unsigned char* res);

void shl_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void shr_ocall(
    unsigned char* x,
    unsigned char* y,
    unsigned char* res);

void mstore8_ocall(
    uint8_t* b,
    unsigned char* n);

void calldataload_ocall(
    uint64_t offset,
    uint64_t sizeInput,
    uint8_t* input,
    size_t input_size,
    unsigned char* res);

void blockhash_ocall(
    unsigned char* x,
    unsigned char* res);

void sha3_ocall(
    uint8_t* h,
    unsigned char* res);

void generate_address_ocall(
    unsigned char* sender,
    size_t nonce,
    unsigned char* newAddress);

void to_big_endian_ocall(
    unsigned char* v,
    uint8_t* out,
    size_t out_size);

void from_big_endian_ocall(
    uint8_t* begin,
    size_t size,
    size_t begin_size,
    unsigned char* res);

oe_result_t oe_sgx_get_cpuid_table_ocall(
    void* cpuid_table_buffer,
    size_t cpuid_table_buffer_size);

OE_EXTERNC_END

#endif // EDGER8R_ENCLAVE_U_H
